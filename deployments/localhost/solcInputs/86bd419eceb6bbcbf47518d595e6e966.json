{
  "language": "Solidity",
  "sources": {
    "contracts/CrowdFunding.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n// import \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nerror CrowdFunding__DeadlineShouldBeInTheFuture();\nerror CrowdFunding__DonationNotSuccessFully();\nerror CrowdFunding__PleaseSendEnough();\n\ncontract CrowdFunding {\n    struct Campaign {\n        address owner;\n        string title;\n        string description;\n        uint256 target;\n        uint256 deadline;\n        uint256 amountCollected;\n        string image;\n        address[] donators;\n        uint256[] donations;\n    }\n\n    mapping(uint256 => Campaign) public campaigns;\n\n    uint256 public campaignId = 0;\n\n    event CampaignCreated(\n        address indexed _owner,\n        string _title,\n        string _description,\n        uint256 _target,\n        uint256 _deadline,\n        string _image\n    );\n\n    function createCampaign(\n        // address _owner,\n        string memory _title,\n        string memory _description,\n        uint256 _target,\n        uint256 _deadline,\n        string memory _image\n    ) public  {\n        Campaign storage campaign = campaigns[campaignId];\n\n        if (_deadline < block.timestamp) {\n            revert CrowdFunding__DeadlineShouldBeInTheFuture();\n        }\n        campaign.owner = msg.sender;\n        campaign.title = _title;\n        campaign.description = _description;\n        campaign.target = _target;\n        campaign.deadline = _deadline;\n        campaign.image = _image;\n\n        campaignId++;\n\n        emit CampaignCreated(\n            msg.sender,\n            _title,\n            _description,\n            _target,\n            _deadline,\n            _image\n        );\n    }\n\n    function donateToCampaign(uint256 _id) public payable {\n        if (msg.value <= 0) {\n            revert CrowdFunding__PleaseSendEnough();\n        }\n        uint256 amount = msg.value;\n        Campaign storage campaign = campaigns[_id];\n\n        (bool sent, ) = payable(campaign.owner).call{value: amount}(\"\");\n        if (sent) {\n            campaign.donators.push(msg.sender);\n            campaign.donations.push(amount);\n            campaign.amountCollected = campaign.amountCollected + amount;\n        } else {\n            revert CrowdFunding__DonationNotSuccessFully();\n        }\n    }\n\n    function getDonators(\n        uint256 _id\n    ) public view returns (address[] memory, uint256[] memory) {\n        return (campaigns[_id].donators, campaigns[_id].donations);\n    }\n\n    function getCampaigns() public view returns (Campaign[] memory) {\n        Campaign[] memory allCampaigns = new Campaign[](campaignId);\n\n        for (uint i = 0; i < campaignId; i++) {\n            Campaign storage item = campaigns[i];\n\n            allCampaigns[i] = item;\n        }\n        return allCampaigns;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}